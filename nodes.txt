D]WACWG]Uyzq_{]tYjzy{ZwJ~z|I}j@dg[|x__{ssUyTvHhs{ySi{YEyyzq_{sx]R
~{Z][iTfMhhhDR~fMkgGj~bMQIGjaaQ~q]Uyzq_{]^YyS_QdUK}CSBh]gFj~e|Ij}fT~dZYiSuLkJVZiCTQhZ`YjSi{YEyyzq_{sxGjaaQ}YxS@yKqYsUyzqQQwtQzy{YGTnQhh{DyPGs{ssUyzzOPxyS_Q|tcHyPGs{ssUyzzOQI{yRh`ugU}m}O{t{E}SyLtYF}}W_tw}}uQ~q]Uyzq_{^`AS@y{^`AS@yKqYsUyzqQVx^Ejjy{]DRTeQ~q]Uyzq_{^k[PyA{WB:O]]AC\GWUyqsWp]~Yjq{pZaJ|X{IwI}KwsqAs[sWpsy[ie^[pZW[~XcYuqWUyqsWp]PDScYvYrS\d XwbRu\ZuGjzdZXjGSKFZ][[|s]WpsyUy_^[pZW[}HdYvdvY~fwDvwmja ctvX|e{Jcd}F}v|XvtaKjewHwJb_y[E{psyUyqxEchi[[xZIqAs[sWpsy[Sut Xsqy[IchzKjj|\[^jZTu^cc [|s]WpsyUy\pFZ^i[[{ wtu[|s]WpsyUy\pJpZW[dYukcyJ}fwWtZyK}[GvcEqsGtdWE}a{CzYyUyqsY]w@HyX]Y]w@Hy[E{psyUyqx \hz^yX]Y[]Gja{CzYyUyqsY]YqyX{Yz^:D_UJCWE_^y{sW{_vRj{{{XuA~{ |Kk{[Gry{sW{qzQQocY}[y~{{Cq[q^y{sYSu	CT{{{_UT`XPKRTo|BhuC|UIhKyJsQsW{qqPQocY}[yAiBH u}kkfW|lcGkHqMiUc}q C~|ch_y~|]H[P|y]W{qq^yU\VqyyVVJ{[Gry{sW{qzNi``_{X_P|
tEWjTVj`x\~KyJsQsW{qqPSIVqyyRc KyJsQsW{qqPSpY}[zvd`v{vuA~ksIvy@|ls~fqy|sH}XqAyQE{{qq^y{x Pz}PQx Pz}P|y]W{qq^yV`QuePQxEP UyQE{{qq^y{x{X_P}Q{{Tc:N_UAA
]E_U{sxWq_vYhspqXuJ|s vKcHvXy[~qVWqqqU{]@bqy{Z` q[Gy{sxWqqz]Pw qX_[VoYbuvD~]ka DYP^tEZz\{YN{qqqU{ss@bqy{]k]affY|`tfv_kZpDvv~_Y	vf~[~dU]uey |]|HaeacpC{[qU{sxYZ_f{ZVY\}[~qVWqqqU{^{X\uW[}YpF[u	AShw_tKyAqYxWqqq[Qw I\qy{Zh uKyAqYxWqqq[QxtYw[z}f kvqvuJIxIuvyK~dxtfq{txHwXqJ{YN{qqqU{ss Zz}[}Ys Zz}[~qVWqqqU{^k[ue[}YsEZ ^{YN{qqqU{ssqX_[Yp{^c8FUUKA
ZV]
WS 
U[Z QT 	Z]rH[PEW_C
UVQBKBDP_V^]\UC]QE@[D@L^CFIIUFSBX\Q\WBfK@\V]^W\PVPRUQ 	 ]PQ QgU
QZTW R
W	ZRWqo]

XQWPRUTRZSW PWYQU Y \	
U^RQ	XXLF@AX
T TD]]TQ^QEUS^@[WQD:D^UJCPV_PU
WPX Z 	 Sp[ZY\SXL]Y\B_\W\SKIHFY]\W_VWAWSLBQFIF\JLK@WDZ@ZUSVUKdABU\_WUUR_ZPWX	WR[	Sm\SU	QQZgU
YSW
[P	WVR[	SUP\
QSUQ 	]
 WVPS	YZDFBCYT_D_U VZ^PG]S\BPWPF	8DK_RS^] TQ[\VP 
\VS]
pU_U^]]]^UR_ZPWX	WR[	Sm\SU	QQZgU
YSW
[P	WVR[	SUP\
QSUQ 	]
 WVPS	YZDFBCYT_D_U VZ^PG]S\BPWPF	8FUUKA
Q	R]		^U[Q  X\r][^[^__]US
U\QB@@L[_\^V^]CWQEKYLKF^CDABUFSIPWQVWBmIHW\]^\WPVRZUQW[SQmUS\SSS
oW
QYU
RZWT[SQW	RU SS\	SU	
]TPQ QPFDBA
Q V VMUW TSWXM_Q\@Y^XL	8D\\CKVZPWWRR^		 S_QxQX[\QQBQV
]\S@K@MYW\\]^\KWSG@YMIF\AD@@]DQBQUYVU@fIIU\_\WURTR[]S  	WPS	YmW SW	[QQf]

XQWPRUTRZ QW PWYQU Y \	
U^RQ	XXLF@AX
T TD]]TQ^QEUS^@[WQD:D^UJCSV S[P
	_WP ] 	 P	Xp__UU_UDS\^[@IBFYV^\_\WJU[GB[FIDTAFK@\LQ@ZUXT]@dKBU^W\UUZTPP\S	URQ	XoWQU	ZYQmU SS\PP	U^RQ	X][W
QQUQWWVR[	SZDM@KS_
TD_U^Q^ZG]X^J[WZF	 :N^UAA

UPZ 

]P
W
 P	rTVW]V_UWZVUWSJK@F[_WV]^WC\SM@YFKM\KDKBUD[BZWQ]UJfIBWW_VWWR^RPUY \PSQf]P RWTU	_ZoWQSUZP\VPSQU	R]
SXW	S		UWT[SQZFDICQ V^F_WV[\XG_QWBQUXF	3FTWCA^W X 
UZT 	ZrU]\WUWUC
U\QB@@L[_\^V^]CWQEKYLKF^CDABUFSIPWQVWBmIHW\]^\WPVRZUQW[SQmUZP\T
	U	TRoojWT WQ[RWUZSV\P	P f  V
TU_ZQS\PUSQ]S  W	
	UTRZSXFF@JS TVL]W_SVZE_S^KY_ZD:O]]AC\GyyqsY]Yqyq{IpYO|s[sWp^zHyX]WpE]EeYTUk
]^@WV^]aQzAG[ Lc|\\~j]PA`B_Bz@^jhDFxB_]xjESH]FuiGRegF`]TeX[^rBj Z vdS[|s{psy[ie`[pZWUy_VDcg\Fja^`cqAtc]WpsrERx pZWUyXc tIqAtc]WpsrBjq{psqJ~XpZcdrX}qvgiK|fwHcgqFied]tI~XsGttu}XdY`ga[|s{psy[ie^[pZWUyXwIpYO|s[sWp^vXUa{psrZTj`FpYO|s[sWp]^Tq{psrSK{C}aWUyqx \hz^yX]Wp]DR_gYuqyyqsYXwHTq{psr\Red^[gmGj wYuqyyqsYZw~Qq{psqDU\VhZxjeUuUFpYO|s[sWp^jASK{psrRzYuqyyqsYZByX]WpYq|s\3FUWCAUO{{qqPTQ{{qy@yQE~q[q^yVpJ{X_^yMWGgP]]a_^I^\\_ 
h[xCGY	EksWcWC\S{kaudIXQp` Qz}|A ~_U|
|ESzfMioISeTVT|Y{[GwsQsW{_vRj{{{qzPQoVJVjyLi
kY~s ry{sYQu	@T{{{qy	~|Y~s ry{sYSeaPQsY|fbR~|ZY eM|^]|a A}odY~eu~
cD|fiN}|sJ|vyiU`Z{[GwsQsW{_vIj{{{qyA}Q{Cvc_^y{xJk[PQsYkjf	RA{Cvc_^y{xEhjaPQsYV}P|y{{qqPTp^Ghayy{xEP UyQE~q[q^yUZFQaPQsYk_\WSdI~_~TyQE~q[q^yVpXVuWPQsY~Ta
i|gbS|A{Cvc_^y{x Pz}PQsYVuHCyQE~q[q^yV|ESayy{{Yvc@ :L@_XS^	ZTP_QP 
R
\V QpMBWFB]]U
UZTPP\S	URQ	XoW	VQU	[ZVmU SS\PP	][W
QQUQWWVR[	SU_ZQSXMDHASV VF]\
TS\ZETQV@YUZD 	2D\WACSQPT

	WR\ 
		Vp_E[YH[S__UVZ_\U^QUWSJK@F[_WV]^WC\SM@YFKM\KDKBUD[BZWQ]UJfIBWW_VWWR^RPUY \PSQfDWYI]mf]

XQWPRUTRZSW PWYQU Y \	
U^RQ	XXLF@AX
T TD]]TQ^QEUS^@[WQD:D^UJC	_Q   
	]TWP  	 PUp^GSYJYSYVBY\UZVUWSJK@F[_WV]^WC\SM@YFKM\KDKBUD[BZWQ]UJfIBWW_VWWR^RPUY \PSQfC]]E^mf]

XQWPRWY U  P\RPU	R	]TPQ QWRUXYWXW			U_ZQSXMDHASV VF]\
TS\ZETQV@YUZD 	2FB]XQW

]STVQSVR\VT]R]
QVVyVMQ[J[ZP^H[^UWX
UZTPP\S	URQ	XoKW_G^ooW
QYU
RZWT[SQW	RU SS\	SU	
]TPQ QPFDBA
Q V VMUW TSWXM_Q\@Y^XL	8D\\CK
UYTS VWRP 	  	]xJYPG^WY\^[@IBFYV^\_\WJU[GB[FIDTAFK@\LQ@ZUXT]@dKBU^W\UUZTPP\S	URQ	XoKW_G^ooW
QYU
RZWT[SQW	RU SS\	SU	
]TPQ QPFDBA
Q V VMUW TSWXM_Q\@Y^XL	88