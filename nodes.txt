D]WACWG]UyzqP{]tYjzy{ZwJ~z|Ij{YEyyzqP{sxZQna^}Y{ ~zyDqYsUyzq^SwHTzy{]^T~b_PIYTn~EhwH|T	NhI{AsPqP{ss[Qna^}Y{JiC}Ow}j kdU|ma@kJsFiTa}sH~}ah]{ ~~~ZJY[|x_P{ssUyT[Vs{yWTM{YEyyzqP{sxEiabX{Z][|vBWhV]jaz[~I{AsPqP{ss[S~	NVs{ySaI{AsPqP{ss[Sq}^}Yx}d	bq{twJ~jqNt{K|mq~dsy}u}ZJyPG|{ssUyzzPx[PzPx[|x_P{ssUyWbQwg[PzBP^yPG|{ssUyzz{Z][}Py|Ta:O]RAC\GXUyqsWp]qYjq{pZrJ~q wI}aHwZ~[|s]WpsvUy_t@cs~yXk pY@yyqsWps}]R| pZX[T dYcwqD|_``CYR\E[}\y[E{psvUyqx@cs~y_`]`daY~ kudq_iX{Dwty_}[wdy[|f^]tg~ ~_wH`gf}a{CzYvUyqsY[]ayX]Y]z[|s]WpsvUy\pX]wP[[{FZwAQj|_uI~As[sWpsv[SuI]s~yXc tI~As[sWpsv[SzYvY}}d`vptrJ}KsItt~K|fsudvyvwvZzJy[E{psvUyqx [xz[[x [xz[|s]WpsvUy\`Zwb[[xE[^y[E{psvUyqxpZX[}[{{_a
:D_UJCWE_^ytsW{_vRjt{{XuA~t |K}dHfeP|v]W{qq^yZt@hqyy]k {[GrytsW{qzVR| {X_PiZdEhjjORpdEk eLjp`EQKLjocY~s_^ytsW{_\Ry]]YfW@}MQJh_eMjpg |K 	jsd\~fXRi]wDkHTQiMVYhXbRj]k{[GrytsW{qzLjocY}[z
SN{Cq[q^ytsYQuv	Qt{{[	LT`YhjyOy^E{{qq^ytxGPz	y]]Y|vaCy^E{{qq^ytxGQKyy\``we^}cG{vyN}]{Dv[M}sQWfS}MwY~s_^ytsW{\bJSN{{\bJSN{Cq[q^ytsYVz\Njd{{_ORZgY~s_^ytsW{\iP^{I{U@ :A_UAA
RE_U{sxW~_vYhsp~XiJ~ZpIyKIyqyAqYxW~qq[kgU[~X_[|ZhY{s_U{sxW~_XDQhYx[zQ^o VujPw\T}GhxoZV bGQIFT_S[~qVW~qqU{]U[~X_[JoYxf~Y|d|Dxuehc	 mv~X~gpJmfuFtwXxviKhg|HyHj_{YN{~qqU{ssEmja[}YsTKyAqYxW~qq[Qw Vqy{Y ImjrKhhw\U\bZVwUma[~qVW~qqU{^{FT\a[}Yp yv}[~qVW~qqU{^{J~X_[f[ ueaqJd|WzXqKY	Gxa E|IxHyH_HcpCt[qU{sxYSuHH{ZVYSuHH{YN{~qqU{ss Rjr^{ZVYU_	GhcpCt[qU{sxYS[y{ZpYt\ 8FUUDA
ZVR
WS
U[U QT 	ZRrH[PEWPC
UYQBKBDP_Y^]\UCRQE@[D@C^CFIIU
FSBX\QSWBfK@\Y]^W\PVPRUQ 	 RPQ QhU
QUTW R
W	URWqoR

XQWPRUTRZSW PWVQU V \	
UQRQ	XXCF@AXT TD]RTQ^QEZS^@[WQD:D^UJCPV_PU
WPX U 	 SpTZY\SXL]V\B_\W\SKIGFY]\W_YWAWSLB^FIF\JCK@WDZ@ZUSVUKdNBU\_WUUR_UPWX	WRT	Sm\SU	QQZhU
VSW
[P	WVRT	SUP\
QSUQ 	R
 WVPS	VZDFBCVT_D_U VZ^_G]S\BPW_F	8DK_]S^]TQT\VP 
SVSR
pU_U^]R]^UR_UPWX	WRT	Sm\SU	QQZhU
VSW
[P	WVRT	SUP\
QSUQ 	R
 WVPS	VZDFBCVT_D_U VZ^_G]S\BPW_F	8FUUDA
Q	RR		QU[Q  XSr][^[^_P]US
U\QB@@C[_\^V^RCWQEKYCKF^CDNBUFSI_WQVWBmIGW\]^\WPVRUUQW[SQmUS\SSS
oW
QVU
RUWT[SQW	RUSS\	SU	
RTPQ Q_FDBA
Q V VMZW TSWXB_Q\@Y^XC	8D\\CDVUPWWRRQ		 S_QwQX[\QQBQV
R\S@K@MYX\\]^\DWSG@YMI
F\AD@@RDQBQUVVU@fIIU
\_\WU RTR[RS  	WPS	VmW SW	TQQfR

XQWPRUTRZQW PWVQU V \	
UQRQ	XXCF@AXT TD]RTQ^QEZS^@[WQD:D^UJCSV STP
	_WP R 	 P	XpP_UU_UD\\^T@IBFYV^
\_\WJUTGB[FID[AFK@\CQ@ZUXTR@dKBU^X\UUUTPP\S	URQ	XoWQU	ZVQmUSS\PP	UQRQ	XR[W
QQUQWWVRT	SZDM@DS_TD_UQQ^ZG]X^E[WZF	 :A^UAA

UPZ 

RP
W
 P	rTVWRV_UWZVUWSEK@F[_WY]^WC\SB@YFKM\DDKBUDTBZWQ]UEfIBWW_YWWRQRPUV \PSQfRP RWTU	_UoW QSUUP\VPSQU 	RR
SXW	S	UWT[SQZFDICQ VQF_WVT\XG_QWB^UXF	3F[WCAQW X
UUT 	UrU]\WZWUC
U\QB@@C[_\^V^RCWQEKYCKF^CDNBUFSI_WQVWBmIGW\]^\WPVRUUQW[SQmUUP\T
	U 	TRo`jWT WQTRWUUSV\P	P f  VTU_UQS\PUSQRS  W	
	UTRZSXFF@JS TVC]W_SYZE_S^KYPZD:O]RAC\GyyqsY]Y~yq{IpY@|s[sWp^uHyX]WpEREeYTUd
]^@WY^]a^zAG[ Lcs\\~j]PAoB_Bz@^jgDFxB_]xeESH]FufGRegF`]TeX[^}Bj Z vd\[|s{psv[ie`[pZXUy_VDcgSFja^`c~Atc]Wps}ERx pZXUyXc tI~Atc]Wps}Bjq{ps~J~XpZcd}X}qvgfK|fwHcg~Fied]tI~XsGttz}XdY`gn[|s{psv[ie^[pZXUyXwIpY@|s[sWp^yXUa{ps}ZTj`FpY@|s[sWp]^Tq{ps}SK{C}aXUyqx \hu^yX]Wp]DR_gYuqyyqsYXwHTq{ps}\Red^[gbGj wYuqyyqsYZwqQq{ps~DU\VhZxeeUuUFpY@|s[sWp^eASK{ps}RzYuqyyqsYZByX]WpY~|s\3FZWCAU@{{qqPT^{{qy@y^E~q[q^yYpJ{X_^yBWGgP]Ra_^I^\\_ 
h[xCGY	EdsWcXC\S{knudIXQ` Qz}|N ~_U||ESzfMi`ISeTVTsY{[Gws^sW{_vRjt{{qzPQ`VJVjyLikY~s rytsYQu	@Tt{{qy	~sY~s rytsYSeaP^sY|fbR~sZY eMs^]|a A}`dY~eu~cD|fiN}ssJ|vyiZ`Z{[Gws^sW{_vIjt{{qyA}^{Cvc_^ytxJk[P^sYkjf	RN{Cvc_^ytxEhjaP^sYV}P|v{{qqPT^GhayytxEP Uy^E~q[q^yZZFQaP^sYk_\WSdI~_~Ty^E~q[q^yYpXVuWP^sY~Tai|gbS|N{Cvc_^ytx Pz}P^sYVuHCy^E~q[q^yY|ESayyt{Yvc@ :C@_XS^	ZTP_QP 
R
SV QpMBXFB]]U
UUTPP\S	URQ	XoW	VQU	[UVmUSS\PP	R[W
QQUQWWVRT	SU_UQSXMDGASV VF]\TS\ZETQY@YUZD 	=D\WACSQPT

WR\ 
	Vp_ETYH[S__UYZ_\U^QUWSEK@F[_WY]^WC\SB@YFKM\DDKBUDTBZWQ]UEfIBWW_YWWRQRPUV \PSQfDXYI]mfR

XQWPRUTRZSW PWVQU V \	
UQRQ	XXCF@AXT TD]RTQ^QEZS^@[WQD:D^UJC	_Q  
	]TWP  	 PUpQGSYJYSYYBY\UZVUWSEK@F[_WY]^WC\SB@YFKM\DDKBUDTBZWQ]UEfIBWW_YWWRQRPUV \PSQfCR]E^mfR

XQWPRWV U P\RPU	R	RTPQ QWRUXVWXW		U_UQSXMDGASV VF]\TS\ZETQY@YUZD 	=FB]XQW

RSTVQSVR\VT]RR
QVVyVBQ[J[ZP^G[^UWX
UUTPP\S	URQ	XoDW_G^ooW
QVU
RUWT[SQW	RUSS\	SU	
RTPQ Q_FDBA
Q V VMZW TSWXB_Q\@Y^XC	8D\\CD
UVTS VWRP 	  	]wJYPG^WV\^T@IBFYV^
\_\WJUTGB[FID[AFK@\CQ@ZUXTR@dKBU^X\UUUTPP\S	URQ	XoDW_G^ooW
QVU
RUWT[SQW	RUSS\	SU	
RTPQ Q_FDBA
Q V VMZW TSWXB_Q\@Y^XC	88