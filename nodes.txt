D]W@CWG]TyqqT{]tXjqy{ZwK~q|I}Kc{@s[qT{ssZie\X{Z]Z~XaZ~q]TyqqT{]ZESaZ}YxFjjbXkg
FjzfYS`FSKEQ]QZ|s_T{ssTy_\X{Z]Zjev_k]x_~HeG]}q hZcJ|fX^hdkG~HyZU~HX^}dZ_y[Gx{ssTyqzFhhcZ[z QI{@s[qT{ssZSuvSs{y[	DPwd[S vFVs
Z|s_T{ssTy\rEQ^cZ[y|tZ|s_T{ssTy\rI{Z]ZdY	v`csK}feTZsJ}K DYD}KqDd]D}ay@qYsTyqqZVwJIyX_ZVwJIy[Gx{ssTyqzWhp_yX_ZP]Fjay@qYsTyqqZVY{yXyZq^:D]VACWG\UyqrW{]uYjqz{ZvJ~q |I~qHtv[|s\W{srUy_u@hszyXj {YDyyqrW{sy]R} {Z\[T eYhwuD|_akGYR\~EPy\y[D{{srUyqy@hszyXaXhZf jXe\~dzH~vXD|wjE}KYk~H|fa\kaZ}HX|tP~KzCqYrUyqrYP]eyX\YV~[|s\W{srUy\qXVwT[[zFWgeHTueIhwu|KzCqYrUyqrYQw
KTqz{Zb}KzCqYrUyqrYQx~[[yf atyvvHIrK}vzJ~drK|frJ{trJXrH{YDyyqrW{syRz~Y}YyRz~Y~q\UyqrW{^aSufY}YyGR \{YDyyqrW{sy yX\YYzyVc8F^WCA	UD]W{pqUy^t[hpyyYkH~YyK~JJ|J}Z{CqZqUypsYkd\YyY]Y|Ya[|r]W{pqUy^ZFQ a[Zx Q]fQthPt^S Eh{fXQ`EQJDS^QY~r_UypsW{^\YyY]YkdeE~tw kISF}^g|p }w^[~gWKtcDwu }Isk^yiIc{ZGyypsW{pzGjkcY}ZzSJ{CqZqUypsYQtvQp{{Z	EQ{^JSd~ZRp
Y~r_UypsW{]rDS]cY}Zy~wY~r_UypsW{]rHyY]YfX	wb`sHguU}YsIJ E}ZGJqE}g]G`yAsZsW{pq[TtJJ{Y_[TtJJ{ZGyypsW{pzUkp\{Y_[R^Eh`yAsZsW{pq[TZ{{Yy[s]8E]WC@VG]WzqqUz]t[iqyzZkHXyK}I ~K}c{Cp[qUzssYje\YzZ]Y}Xa[q]WzqqUz]ZFPa[|YxYie^W]CieXic[iuH]\WqyApYsWzqq[RgcY|[y}d{G|f[ic~ iJdcHjXyF|ggI}q K}t`Z}HyEitx[i_u[q]WzqqUz]\Wqyz^VJz[GyzssWzqzEjh`_zX_[|PuzDjhx[KyApYsWzqq[PwIWqyzZc ~KyApYsWzqq[PxY|[z}g `vzvuH~ssI~vyHdsIfqHztsH|XqJzYE{zqqUzsx Qz}[|Yx Qz}[q]WzqqUz^`Pue[|YxEQ ^zYE{zqqUzsxzX_[~Y{{Uc9F^U@A
QVV
WR

UPQ QT 	QVrH[QE\TC
U]QBKCD[_]^]]UCVQE@ZDKG^CGIBUFSBXWQWWBfJ@W]]^WWPVQRUQ 	VPPQlU
QQTW
R
V	QRWpoV

SQWQR
UTRQ
SWPVRQUR W	

UURQ	SXGF@AST UD]VTP^ZE^S^@ZWZD
:D_UAC	P
VTPU
WQS Q   SpPZY\RXG]R\B^\W]S@ICFY]]\_]WAVSGBZFIG\AGK@WDQ@ZUSWU@dJBU]_\UURTQPWS	VRP	SlWRU	QQQlU
RSWPP	VVRP	SU
PW
QRU
Q 	V
WVQS	RZDFCCRTTD_UVQ^[G]S]B[W[F	9D@_YS^VUQPWVP WVRV
pU^UU]V]^	URTQPWS	VRP	SlWRU	QQQlU
RSWPP	VVRP	SU
PW
QRU
Q 	V
WVQS	RZDFCCRTTD_UVQ^[G]S]B[W[F	9F^U@A
QRV	
	UUP
Q SWr][_[U_T]UR
 U\PBK@G[_\^]^VCWPE@YGKF_CDJBUGSB[WQVVBfICW\\^WWQVRQUQ 
WPSQmU
SWSRSoWQRU
RQWUPSQV	RUSSW	S
U
	VTPPQ[FDB@Q VVF^W US\XF_Q\AYUXG	8E\WC@VQPW

VRRU	 
STQsQX[]QZBQVV\S@J@FY\\\\^W@WSGAYFIF\ADK@VDQCZURVU@gIBU\_\VURTRPVS	WQS	RmWSV	PQQmV

SQWQR
UTRQQWPVRQUR W	

UURQ	SXGF@AST UD]VTP^ZE^S^@ZWZD
:D_UAC	SWSPP	TWQ
 V   Q	SpT_UU^UDX W^P@IBGY]^\_\VAUPGB[GID_AFJ@WGQ@[USTV@dKCU^\\UUQTPQWS
	URQ	SoW
QU	QRQmU
SRWPQ	UURQ	SVPWQQUQ 
W

VVRP	S[DF@@STTD^UUQ^ZF]S^A[WZG	:E^UA@
 
UPQ 

VP
V 
P	sT]WVV_UVQV	U\SAK@FZ_\]]^WCWSF@YFJF\@DKCUDPBZVQVUAfIBV\_]WVRURPUR 
WPS
QmVPRW
T
U	TQoVQSU
QP
WVPS
QU	RV
RSW	R	U
WUPSQZGDBCQVUF_V VP\XG^Q\BZUXF
	8F_WCA	UW S
UQT  	QrT]WW^WUB
 U\PBK@G[_\^]^VCWPE@YGKF_CDJBUGSB[WQVVBfICW\\^WWQVRQUQ 
WPSQmUQQWT	U	TRodjW
T VQPRWU
QSWWP	Q m VTUTQQRWQUSQVSW		 UTRQ
SXFG@A S U VG]WTS]ZE_R^@YTZD
:D]VACWGyyqrYVYzyqzI{YD|s[rW{^qHyX\W{EVEdY_U`
]^@\]^]jZzAGZ Gcw\\~k][AkB_B{@UjcDFxC_VxaESH\F~bGRefFk]TeXP^yBj [ }dX[|s{{sr[iea[{Z\Uy_WDhgWFja^kczAtc\W{syERy {Z\UyXb IzAtc\W{syBjqz{szJ~XqZhdyX}q}gbK|fvHhgzFiee]I~XrGt~}XeYkgj[|s{{sr[ie_[{Z\UyXvI{YD|s[rW{^}XUaz{syZTjaF{YD|s[rW{]^Tqz{sySKzCva\Uyqy Whq^yX\W{]DR_fY~qyyqrYSw
HTqz{sy\Ree^PgfGj vY~qyyqrYQwuQqz{szDU\WhQxaeUuTF{YD|s[rW{^aASKz{syRz~Y~qyyqrYQByX\W{Yz|s\8F^WCA	UD{{pq[TZ{{pyKyZE~qZqUy]pJ{Y_UyFWGg[]Va__B^\\_ h[xCFYE`sWc\C\R{`judISQ{` Q{}|J ~^^||ES{fFidISdT]TwY{ZG|sZsW{^vYjp{{pz[QdVJVkyGikY~r yypsYQt	KTp{{py~wY~r yypsYSda[ZsY|gbY~wZYeFw^]|` J}ddY~du~cD|giE}wsJ|wy i^`Z{ZG|sZsW{^vBjp{{pyJ}Z{Cvb_UypxJk [[ZsYkkfRJ{Cvb_UypxEhka[ZsYV }[|r{{pq[T{^Gh`yypxEP^yZE~qZqUy^ZFQ a[ZsYk^\\S dI~^~_yZE~qZqUy]pXVtW[ZsY~ Tai|fbX|J{Cvb_Uypx P{}[ZsYVtHHyZE~qZqUy]|ES`yyp{Yvb@:G@_XR^	Q
TQTQP 
RWV PpFB\FB]]^
UQTPQWS
	URQ	SoW	
VQ
U	PQVmU
SRWPQ	VPWQQUQ 
W

VVRP	SUTQQRXFDCAR V VF]WTS\[E_Q]@YU[D	9D\W@CSQPT
WR
W 	VpTEPYH[R_TU]Z_\TUQ	U\SAK@FZ_\]]^WCWSF@YFJF\@DKCUDPBZVQVUAfIBV\_]WVRURPUR 
WPS
QmD\YI]lmV

SQWQR
UTRQ
SWPVRQUR W	

UURQ	SXGF@AST UD]VTP^ZE^S^@ZWZD
:D_UAC		TQ  	VTWQ   QUpUGSYKYXY]BY\TQV	U\SAK@FZ_\]]^WCWSF@YFJF\@DKCUDPBZVQVUAfIBV\_]WVRURPUR 
WPS
QmCV]E^lmV

SQWQR
VR U P
WRQU	RVTPPQW
RUSRW
SV		UTQQRXFDCAR V VF]WTS\[E_Q]@YU[D	9FB]YQ\


VSTWQSVRWVUVRV
QVVrVFQ[JZZ[^C[^UWS
UQTPQWS
	URQ	So@W_G_o oWQRU
RQWUPSQV	RUSSW	S
U
	VTPPQ[FDB@Q VVF^W US\XF_Q\AYUXG	8E\WC@URTSVVRP   	VsJYPF^WR W^P@IBGY]^\_\VAUPGB[GID_AFJ@WGQ@[USTV@dKCU^\\UUQTPQWS
	URQ	So@W_G_ooWQRU
RQWUPSQV	RUSSW	S
U
	VTPPQ[FDB@Q VVF^W US\XF_Q\AYUXG	89