D]WACWG]Uyzq_{]tYjzy{ZwJ~z|Ij{YEyyzq_{sxZQnaQ}Y{ ~zyKqYsUyzqQSwHTzy{]^T~bPPIYTn~JhwH|T	AhI{AsPq_{ss[QnaQ}Y{JiC}@w}j 	kdU|maOkJsFiTa	}sH~}ah]{ ~~~UJY[|x__{ssUyTTVs{yWTB{YEyyzq_{sxEiabW{Z][|vMWhV]jazT~I{AsPq_{ss[S~	AVs{ySaI{AsPq_{ss[Sq}Q}Yx}d	b~{twJ~jqAt{K|mq~dsy}q@}ZJyPGs{ssUyzzPx[PzPx[|x__{ssUyWbQwg[PzMP^yPGs{ssUyzz
{Z][}PysTa:O]]AC\GWUyqsWp]~Yjq{pZ}J~q wI}aHwZq[|s]WpsyUy_t@csqyXk pYOyyqsWpsr]R| pZW[T dYcw~D|_``LYR\E[r\y[E{psyUyqx@csqy_`]`dnY~ kud~_iX{Dwtv_}[wdv[|f^]tgq ~_wH`gi}a{CzYyUyqsY[]nyX]Y]u[|s]WpsyUy\pX]w_[[{FZwAQj|_uIqAs[sWpsy[SuI]sqyXc tIqAs[sWpsy[SzYvYr}d`vpt}J}KsIttqK|fsudyyvsHvZuJy[E{psyUyqx [xu[[x [xu[|s]WpsyUy\`Zwm[[xE[^y[E{psyUyqxpZW[}[{{_a:D_UJCWE_^y{sW{_vRj{{{XuA~{ |K}kHfeP|y]W{qq^yUt@hqyyRk {[Gry{sW{qzVR| {X_PiUdEhjjORdEk eLj`EQKLj`cY~s_^y{sW{_\RyR]YfW@}BQJh_eMjg |K 	j|d\~fXRiRwDkHTQiBVYhXbRjRk{[Gry{sW{qzLj`cY}[z
SA{Cq[q^y{sYQuv	Q{{{[	LToYhjyOyQE{{qq^y{xGPz	yR]Y|vaCyQE{{qq^y{xGQKyyS``we^}lG{vyN}R{Dv[M}|UWvu}BwY~s_^y{sW{\bJSA{{\bJSA{Cq[q^y{sYVz\Njk{{_ORUgY~s_^y{sW{\iPQ{I{U@ :N_UAA
]E_U{sxWq_vYhspqXiJ~ZpIvKIvqyAqYxWqqq[kgU[qX_[|ZhYts_U{sxWq_XDQhYw[zQ^o YujPw\[}GhxoZY bGQIF[_S[~qVWqqqU{]U[qX_[JoYwf~Y|d|Dwuehc	 bv~X~gpJbfuFtwXwviKhg|HvHj_{YN{qqqU{ssEbja[}Ys[KyAqYxWqqq[Qw Yqy{Y IbjrKhhw\Z\bZVwUba[~qVWqqqU{^{F[\a[}Yp vv}[~qVWqqqU{^{JqX_[f[ ujaqJd|WuXqKY	Gwa E}sxGuf_HcpC{[qU{sxY\uHH{ZVY\uHH{YN{qqqU{ss ]jr^{ZVYZ_	GhcpC{[qU{sxY\[y{ZpY{\ 8FUUKA
ZV]
WS 
U[Z QT 	Z]rH[PEW_C
UVQBKBDP_V^]\UC]QE@[D@L^CFIIUFSBX\Q\WBfK@\V]^W\PVPRUQ 	 ]PQ QgU
QZTW R
W	ZRWqo]

XQWPRUTRZSW PWYQU Y \	
U^RQ	XXLF@AX
T TD]]TQ^QEUS^@[WQD:D^UJCPV_PU
WPX Z 	 Sp[ZY\SXL]Y\B_\W\SKIHFY]\W_VWAWSLBQFIF\JLK@WDZ@ZUSVUKdABU\_WUUR_ZPWX	WR[	Sm\SU	QQZgU
YSW
[P	WVR[	SUP\
QSUQ 	]
 WVPS	YZDFBCYT_D_U VZ^PG]S\BPWPF	8DK_RS^] TQ[\VP 
\VS]
pU_U^]]]^UR_ZPWX	WR[	Sm\SU	QQZgU
YSW
[P	WVR[	SUP\
QSUQ 	]
 WVPS	YZDFBCYT_D_U VZ^PG]S\BPWPF	8FUUKA
Q	R]		^U[Q  X\r][^[^__]US
U\QB@@L[_\^V^]CWQEKYLKF^CDABUFSIPWQVWBmIHW\]^\WPVRZUQW[SQmUS\SSS
oW
QYU
RZWT[SQW	RU SS\	SU	
]TPQ QPFDBA
Q V VMUW TSWXM_Q\@Y^XL	8D\\CKVZPWWRR^		 S_QxQX[\QQBQV
]\S@K@MYW\\]^\KWSG@YMIF\AD@@]DQBQUYVU@fIIU\_\WURTR[]S  	WPS	YmW SW	[QQf]

XQWPRUTRZ QW PWYQU Y \	
U^RQ	XXLF@AX
T TD]]TQ^QEUS^@[WQD:D^UJCSV S[P
	_WP ] 	 P	Xp__UU_UDS\^[@IBFYV^\_\WJU[GB[FIDTAFK@\LQ@ZUXT]@dKBU^W\UUZTPP\S	URQ	XoWQU	ZYQmU SS\PP	U^RQ	X][W
QQUQWWVR[	SZDM@KS_
TD_U^Q^ZG]X^J[WZF	 :N^UAA

UPZ 

]P
W
 P	rTVW]V_UWZVUWSJK@F[_WV]^WC\SM@YFKM\KDKBUD[BZWQ]UJfIBWW_VWWR^RPUY \PSQf]P RWTU	_ZoWQSUZP\VPSQU	R]
SXW	S		UWT[SQZFDICQ V^F_WV[\XG_QWBQUXF	3FTWCA^W X 
UZT 	ZrU]\WUWUC
U\QB@@L[_\^V^]CWQEKYLKF^CDABUFSIPWQVWBmIHW\]^\WPVRZUQW[SQmUZP\T
	U	TRoojWT WQ[RWUZSV\P	P f  V
TU_ZQS\PUSQ]S  W	
	UTRZSXFF@JS TVL]W_SVZE_S^KY_ZD:O]]AC\GyyqsY]Yqyq{IpYO|s[sWp^zHyX]WpE]EeYTUk
]^@WV^]aQzAG[ Lc|\\~j]PA`B_Bz@^jhDFxB_]xjESH]FuiGRegF`]TeX[^rBj Z vdS[|s{psy[ie`[pZWUy_VDcg\Fja^`cqAtc]WpsrERx pZWUyXc tIqAtc]WpsrBjq{psqJ~XpZcdrX}qvgiK|fwHcgqFied]tI~XsGttu}XdY`ga[|s{psy[ie^[pZWUyXwIpYO|s[sWp^vXUa{psrZTj`FpYO|s[sWp]^Tq{psrSK{C}aWUyqx \hz^yX]Wp]DR_gYuqyyqsYXwHTq{psr\Red^[gmGj wYuqyyqsYZw~Qq{psqDU\VhZxjeUuUFpYO|s[sWp^jASK{psrRzYuqyyqsYZByX]WpYq|s\3FUWCAUO{{qqPTQ{{qy@yQE~q[q^yVpJ{X_^yMWGgP]]a_^I^\\_ 
h[xCGY	EksWcWC\S{kaudIXQp` Qz}|A ~_U|
|ESzfMioISeTVT|Y{[GwsQsW{_vRj{{{qzPQoVJVjyLi
kY~s ry{sYQu	@T{{{qy	~|Y~s ry{sYSeaPQsY|fbR~|ZY eM|^]|a A}odY~eu~
cD|fiN}|sJ|vyiU`Z{[GwsQsW{_vIj{{{qyA}Q{Cvc_^y{xJk[PQsYkjf	RA{Cvc_^y{xEhjaPQsYV}P|y{{qqPTp^Ghayy{xEP UyQE~q[q^yUZFQaPQsYk_\WSdI~_~TyQE~q[q^yVpXVuWPQsY~Ta
i|gbS|A{Cvc_^y{x Pz}PQsYVuHCyQE~q[q^yV|ESayy{{Yvc@ :L@_XS^	ZTP_QP 
R
\V QpMBWFB]]U
UZTPP\S	URQ	XoW	VQU	[ZVmU SS\PP	][W
QQUQWWVR[	SU_ZQSXMDHASV VF]\
TS\ZETQV@YUZD 	2D\WACSQPT

	WR\ 
		Vp_E[YH[S__UVZ_\U^QUWSJK@F[_WV]^WC\SM@YFKM\KDKBUD[BZWQ]UJfIBWW_VWWR^RPUY \PSQfDWYI]mf]

XQWPRUTRZSW PWYQU Y \	
U^RQ	XXLF@AX
T TD]]TQ^QEUS^@[WQD:D^UJC	_Q   
	]TWP  	 PUp^GSYJYSYVBY\UZVUWSJK@F[_WV]^WC\SM@YFKM\KDKBUD[BZWQ]UJfIBWW_VWWR^RPUY \PSQfC]]E^mf]

XQWPRWY U  P\RPU	R	]TPQ QWRUXYWXW			U_ZQSXMDHASV VF]\
TS\ZETQV@YUZD 	2FB]XQW

]STVQSVR\VT]R]
QVVyVMQ[J[ZP^H[^UWX
UZTPP\S	URQ	XoKW_G^ooW
QYU
RZWT[SQW	RU SS\	SU	
]TPQ QPFDBA
Q V VMUW TSWXM_Q\@Y^XL	8D\\CK
UYTS VWRP 	  	]xJYPG^WY\^[@IBFYV^\_\WJU[GB[FIDTAFK@\LQ@ZUXT]@dKBU^W\UUZTPP\S	URQ	XoKW_G^ooW
QYU
RZWT[SQW	RU SS\	SU	
]TPQ QPFDBA
Q V VMUW TSWXM_Q\@Y^XL	88