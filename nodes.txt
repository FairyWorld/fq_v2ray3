D]W@CWG]TyqsT{]tXjq{{ZkK|X{J|I~[|Y{@s[sT{ssZie^X{Z]Z~XcZ~q]TyqsT{]ZEScZ}YxS\dSwhRu_QFjzdYS`FSKEQ]QZ|s]T{ssTy_^X{Z]Z}fkhZh^}egGkdcKjqJx^|f^YhgwGi_kDhZ^^} g|wkKy[Ex{ssTyqxFhhcZ[x QI{@s[sT{ssZSutSs{y[Eh]kEy[Ex{ssTyqxDPxyX]Z|tcIy[Ex{ssTyqxDQI{yYc`ugT}fwK{t{D}XGt{G}XTd{}vwZ~q]TyqsT{^`@SK{{^`@SK{@qYsTyqsZVx^Dja{{]ER_gZ~q]TyqsT{^kZ[{J{WB
:D_VACWE\UyqrW{_uYjqz{XvJ~q |KaqzAs[rW{qr[ie_[{X\[~XbY~s\UyqrW{_[DSbY}[yGjja[keGjzeZS aGSKFQ_P[|s\W{qrUy__[{X\[~HW\hvWXjf~Dhfq^a hX~|fTuvF~HjhviZjeu[|ejy[D{{qrUyqyEhjb[[yQKzAs[rW{qr[Suu Sqzy[
^Ve_ATqY~s\UyqrW{\qDS\bY}[z~v~Y~s\UyqrW{\qHyX\YfY
wbarHffU}XrIKE}[IKrJ}X\GazAs[rW{qr[TuKJ{X\[TuKJ{[DyyqrW{qyUjq\{X\[R_
EhazAs[rW{qr[T[z{Xz[s\8D^WCA	WD]W{pqU{^t[hpy{YkH~YyK|J p}p{CqZqU{psYkd\Y{Y]Y|Ya[~r]W{pqU{^ZFQ a[}ZxYhd^V^ChdXh`[htH~^\VpyAqZsW{pq[SdcY}Zy}wYta|J\hYXY~gckdyFkd|]J Jht`]t~_Yd[|d}[~r]W{pqU{^\Vpy{]VJ{ZGy{psW{pzEkk`_{Y_[~VIP SD{ZE{{pqU{pxGP z{Y]Y|waH{ZE{{pqU{pxGQJy{X``veUgG{wyEYDwyFYWgywwY~r_U{psW{]bAQJ{{]bAQJ{CqZqU{psYV{\Eh`{{^DP^gY~r_U{psW{]i[}Z{I{T@8E_UA@
VE_UzssUz_vYis{zXuJ}s}K~sJ~ayApYsUzqq[jg^YzX_[}Zc[s_UzssUz_XDPc[|[zigxYjeGixdXR bGPIDP_S[q]UzqqUz]^YzX_[|gcKie}~ZFiXe }c~fbYgw~XeF~]`_|vbX~tkHjfuJzYEyzqqUzsxGija[|YxPKyApYsUzqq[PwtRqyzYKijrAjg|^KyApYsUzqq[PwKWqyzZc~KyApYsUzqq[Px[|[z}g `tzvuJ~IsK~vyHdsKfyHztwK|XqJzYEyzqqUzsxQz}[|YxQz}[q]UzqqUz^`Pue[|YxGQ ^zYEyzqqUzsx zX_[~Y{yUc9F^W@A
QTV
WR


UPQ QT	QVrH[QE\TC
W]QBKCD[]]^]]UAVQE@ZDKG^CGIBWFSBXWSWWBfJ@W]]^WWPVQRWQ 	VPPSlU
QQTW
P
VQRWpoV

SSWQP
UTRQ
SWPV
RQUR W

WURQ	SZGF@AST UD_VTP^ZG^S^@ZWZF
:D_UAA	P
VTPU
WQSQ  SrPZY\RXG_R\B^\W]S@KCFY]]\]]WAVSG@ZFIG\AGK@WDQBZUSWU@fJBU]_\WURTQPWS 	VPP	SlWRW	QQQlU
RSWPP	VVPP	SU
PW
QRW
Q 	V
WVQSRZDFCCRTTF_UVQ\[G]S]B[U[F	9D@]YS^VUSPWTP WVR
V
pU^UU_V]^	URTQPWS 	VPP	SlWRW	QQQlU
RSWPP	VVPP	SU
PW
QRW
Q 	V
WVQSRZDFCCRTTF_UVQ\[G]S]B[U[F	9F^W@A
QPV	
UUP
QSWr][_[U]T]UR
 U\PBKBG[_\^]\VCWPE@[GKF_CFJBUGSB[WQVVBfKCW\\^WWQVPQUQ 
WPQQmU
SWSRSmWSRU
RQWUPQQVRUSSWS
W
	VTPPS[FDB@S VVF^W US\ZF_Q\AYUZG	8E\WA@TQPW


VRPU	
STSsQX[]QZ@QVV\S@J@F[\\\\^W@WSGAYFKF\ADKBVDQCZWRVU@gIBW\_\VWRTRPVSWQSRmWSVPQQmV

SSWQP
UTRQQWPV
RQUR W

WURQ	SZGF@AST UD_VTP^ZG^S^@ZWZF
:D_UAA	SWQPP	TWQ
V  Q	SrT_UU^UFX W\P@IBGY]\\_\VAWPGB[GIF_AFJ@WGQ@[USVV@dKCU\\\UUQTPQWS
	WRQ	SmW
SU	QRQmU
SRW
PQ	WURQ	SVPWQSUQ 
W

VVPP	S[DFB@STTD^U UQ^ZF]S\A[WZG	8E^UA@
 
UPQ

VP
V 
P	sT]UVV_UVQT	U\QAK@FZ_\]]^WCWQF@YFJF^@DKCUFPBZVQVWAfIBV\]]WVPURPUR 
WPS
QmVPPW
T

U	TQoV
QSU
QP
WTPS
QW	RV
RSW	RU
WUPQQZGDBAQV UF_V TP\XG^Q\@ZUXF
	8D_WCA	UW S
WQT  QrT]WU^WUB
 U\PBKBG[_\^]\VCWPE@[GKF_CFJBUGSB[WQVVBfKCW\\^WWQVPQUQ 
WPQQmUQQWT	W	TRmdjW
V VSPRWU
QSWWP	Q m  VTUTQQRWQWSQVSW	 UTRQ
SXFG@A S U TG]WTQ]ZE_R^@[TZD
:D_VACWEyyqrYV[zyqzI{[D|s[rW{\qHyX\W{GVEdY_W`
]^@\]^]jZzAGZ Gaw\\~k][CkB_B{@UhcDFxC_VzaESH\F~bGRefFk ]TeXP\yBj [ }fX[|s{{qr[iea[{X\Uy_WDheWFja^kazAtc\W{qyERy {X\UyXb KzAtc\W{qyBjqz{qzJ~XqZhfyX}q}ebK|fvHhezFiee]K~XrGv~}XeYkej[|s{{qr[ie_[{X\UyXvI{[D|s[rW{\}XUaz{qyZTjaF{[D|s[rW{_^Tqz{qySKzCvc\Uyqy Wjq^yX\W{_DR_fY~syyqrYSu
HTqz{qy\Ree^PefGj vY~syyqrYQuuQqz{qzDU\WhQzaeUuTF{[D|s[rW{\aASKz{qyRz~Y~syyqrYQ ByX\W{[z|s\8D^WCA	WD{{pq[VZ{{pyK{ZE~qZqU{]pJ{Y_U{FWGg[_Va__B\\\_ j[xCFYG`sWc\C\R{`judISS{` Q{}~J ~^^~|ES{fFkdISdT]VwY{ZG|qZsW{^vYhp{{pz[SdVJVkyGkkY~r y{psYQt	KVp{{py|wY~r y{psYSda[}ZsY|gbY|wZYeF}w^]|` JddY~du|cD|giEwsJ|wy k^`Z{ZG|qZsW{^vBhp{{pyJZ{Cvb_U{pxJk [[}ZsYkkfPJ{Cvb_U{pxEhka[}ZsYV }[~r{{pq[V{^Gh`y{pxEP^{ZE~qZqU{^ZFQ a[}ZsYk^\\Q dI~^~_{ZE~qZqU{]pXVtW[}ZsY~ Tci|fbX~J{Cvb_U{px P{}[}ZsYVtHH{ZE~qZqU{]|ES`y{p{Yvb@8G@_XR^	Q
TQTSP 
RWV PpF@\FB]]^UQTPQWS
	WRQ	SmW	
VS
U	PQVmU
SRW
PQ	VPWQSUQ 
W

VVPP	SUTQQRXFFCAR T VF]WTS\[E_S]@YU[D9D\W@CSQPV
WR
W 	VpTGPYH[R_TW]Z_\TUS	U\QAK@FZ_\]]^WCWQF@YFJF^@DKCUFPBZVQVWAfIBV\]]WVPURPUR 
WPS
QmF\YI]lmV

SSWQP
UTRQ
SWPV
RQUR W

WURQ	SZGF@AST UD_VTP^ZG^S^@ZWZF
:D_UAA		TS  	VVWQ  QUrUGSYKYX[]BY\TQT	U\QAK@FZ_\]]^WCWQF@YFJF^@DKCUFPBZVQVWAfIBV\]]WVPURPUR 
WPS
QmAV]E^lmV

SSWQP
V
R U P
WRQW	RVTPPSW
PUSRW
S V	
	UTQQRXFFCAR T VF]WTS\[E_S]@YU[D9FB]YQ\

VSTWQSVRW VUVPV
QVVrTFQ[JZZ[\C[^UWSUQTPQWS
	WRQ	Sm@W_G_o mWSRU
RQWUPQQVRUSSWS
W
	VTPPS[FDB@S VVF^W US\ZF_Q\AYUZG	8E\WA@WRTSTVR
P  	VsJYPF^UR W\P@IBGY]\\_\VAWPGB[GIF_AFJ@WGQ@[USVV@dKCU\\\UUQTPQWS
	WRQ	Sm@W_G_omWSRU
RQWUPQQVRUSSWS
W
	VTPPS[FDB@S VVF^W US\ZF_Q\AYUZG	89